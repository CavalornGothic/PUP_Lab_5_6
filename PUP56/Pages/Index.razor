@inject HttpClient _httpClient;
@page "/"

<div class="app">
    <div class="header">
        Laboratorium 5-6 PUP
    </div>
    <div class="subheader">
        wyszukiwarka TMDb
    </div>
    <div class="content">
        <div class="search">
            @if(_showParameters)
            {
                <div class="item">
                    <div class="options"><b class="material-icons" @onclick=ShowParameter>expand_less</b></div>
                    @if(_searchType == 0)
                    {
                        <b>Wyszukiwarka filmów</b>
                        <label>Tytuł (wymagany)</label>
                        <input type="text" placeholder="tytuł" @bind-value=_movieTitle  />
                        <label>Rok</label>
                        <input type="number" placeholder="2020" @bind-value=_movieYear />
                        <label>Język</label>
                        <input type="text" placeholder="pl" @bind-value=_movieRegion />
                    } 
                    else
                    {
                        <b>Wyszukiwarka filmów według aktorów</b>
                        <label>Aktor</label>
                        <input type="text" placeholder="imię i nazwisko" @bind-value=_actorName />
                        <button @onclick=AddActor>Dodaj do listy</button>
                        <label>Lista aktorów do wyszukania (@_actors.Count):</label>
                        @foreach(var actor in _actors)
                        {
                            <b>@actor</b>
                        }
                        <button @onclick=LoadMovieListTogether>Razem w obsadzie</button>
                    }
                </div>
                <div class="item">
                    <label>Szukaj według:</label>
                    <select @onchange=ChangeSearchType>
                        <option value="0">Film</option>
                        <option value="1">Aktor</option>
                    </select>
                </div>
                <div class="item">
                    <button @onclick=LoadMovieList>Wyszukaj</button>
                </div>
            }
            else
            {
                <div class="item">
                    <div class="options"><b class="material-icons" @onclick=ShowParameter>expand_more</b></div>
                </div>
            }
        </div>
        @if(_movies.Count > 0)
        {
             <div class="result">
                 Znaleziono: @_movies.Count wyników
                @foreach(var movie in _movies)
                {
                    <div class="item">
                        <div class="left">
                            <div class="title">
                                @movie.Title
                            </div>
                            <div class="overview">
                                @movie.Overview
                            </div>
                        </div>
                        <div class="right">
                            @movie.VoteAverage
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code{
    //klucz api
    private string _apiKey = "api_key="; 
    private ICollection<Movie>? _movies { get; set; } = new List<Movie>();
    private int _searchType { get; set; } = 0;
    private bool _showParameters { get; set; } = true;
    // parametry wyszukiwania
    private string? _movieTitle { get; set; }
    private int? _movieYear { get; set; }
    private string? _movieRegion { get; set; } = "pl";

    // wyszukiwanie po aktorach
    private List<string> _actors { get; set; } = new List<string>();
    private string? _actorName { get; set; }

    private async Task LoadMovieList()
    {
        _movies.Clear();
        if (_searchType == 0)
            _movies = await GetListByMovieFilterAsync();
        else if (_searchType == 1)
            _movies = await GetListByActorFilterAsync();

        if (_movies.Count > 0)
            _showParameters = false;
        else
            _showParameters = true;
    }

    private async Task LoadMovieListTogether()
    {
        _movies.Clear();
        var movies = await GetListByActorFilterAsync();
        _movies = movies.GroupBy(x => x.Title).Where(g => g.Count() > 1).SelectMany(group => group).ToList().DistinctBy(x => x.Title).OrderBy(x => x.Title).ToList();

        if (_movies.Count > 0)
            _showParameters = false;
        else
            _showParameters = true;
    }

    private string BuildQueryByMovieFilter()
    {
        string query = "";
        if (!String.IsNullOrEmpty(_movieTitle))
            query += _movieTitle;

        if(query.Length > 0)
            return "&query=" + System.Web.HttpUtility.UrlEncode(query);

        return "";
    }

    private string BuildOptionalParameterByMovieFilter()
    {
        string query = "";
        if(_movieYear.HasValue)
            query += $"&year={_movieYear}";
        if (!String.IsNullOrEmpty(_movieRegion))
            query += $"&language={_movieRegion}";
        return query;
    }

    private async Task<ICollection<Movie>> GetListByMovieFilterAsync()
    {
        var result = new List<Movie>();
        var jsonToDeserialize = await _httpClient.GetStringAsync($"3/search/movie?{_apiKey}{BuildQueryByMovieFilter()}{BuildOptionalParameterByMovieFilter()}");
        if (String.IsNullOrEmpty(jsonToDeserialize))
            return result;
        dynamic dJson = JsonConvert.DeserializeObject(jsonToDeserialize);
        if (dJson.results != null)
            foreach (dynamic data in dJson.results)
                result.Add(new Movie { OriginalTitle = data.original_title, Title = data.title, Adult = data.adult, Budget = data.budget, Overview = data.overview, ReleaseDate = data.release_date, OriginalLanguage = data.original_language, VoteAverage = data.vote_average });
        return result;
    }

    private async Task<ICollection<Movie>> GetListByActorFilterAsync()
    {
        var result = new List<Movie>();
        var idActors = new List<int>();
        foreach(var actor in _actors)
        {
            var jsonSearchPeople = await _httpClient.GetStringAsync($"3/search/person?{_apiKey}&query={System.Web.HttpUtility.UrlEncode(actor)}");
            if (String.IsNullOrEmpty(jsonSearchPeople))
                continue;
            dynamic dJson = JsonConvert.DeserializeObject(jsonSearchPeople);
            if (dJson.results != null)
                foreach(dynamic data in dJson.results)
                    try { idActors.Add(Convert.ToInt32(data.id)); } catch { continue; }
        }
        result = (List<Movie>)await GetMovieByActorsIDAsync(idActors);
        _actors.Clear();
        return result;
    }

    private async Task<ICollection<Movie>> GetMovieByActorsIDAsync(ICollection<int> actorsID)
    {
        var result = new List<Movie>();
        foreach(var actorID in actorsID)
        {
            var jsonWithMovies = await _httpClient.GetStringAsync($"3/person/{actorID}/movie_credits?{_apiKey}&language=pl");
            if (String.IsNullOrEmpty(jsonWithMovies))
                continue;
            dynamic dJson = JsonConvert.DeserializeObject(jsonWithMovies);
            if(dJson.cast != null)
                foreach(dynamic data in dJson.cast)
                    result.Add(new Movie { OriginalTitle = data.original_title, Title = data.title, Adult = data.adult, Budget = data.budget, Overview = data.overview, ReleaseDate = data.release_date, OriginalLanguage = data.original_language, VoteAverage = data.vote_average });
        }
        return result;
    }

    private void AddActor()
    {
        if (!String.IsNullOrEmpty(_actorName))
            _actors.Add(_actorName);

        _actorName = default;
    }

    private void ChangeSearchType(ChangeEventArgs arg)
    {
        try
        {
            _searchType = Convert.ToInt32(arg.Value);
        }
        catch
        {
            _searchType = 1;
        }
    }

    private void ShowParameter()
    {
        if (_showParameters)
            _showParameters = false;
        else
            _showParameters = true;
    }
}